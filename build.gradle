//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.0+'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'base'

import de.itemis.mps.gradle.*


task wrapper(type: Wrapper) {
    gradleVersion '3.1'
    distributionType 'all'
}

// detect if we are in a CI build
if (project.hasProperty("forceCI")) {
    ext.ciBuild = true
} else {
    //on teamcity we are in a CI build
    if (project.hasProperty("teamcity")) {
        ext.ciBuild = true
    } else {
        ext.ciBuild = false
    }
}


// Detect jdk location, required to start ant with tools.jar on classpath otherwise javac and tests will fail
def java_home = System.properties['java.home']
def jdk_home = java_home
if (!file("$jdk_home/lib/tools.jar").isFile()) {
    jdk_home = jdk_home + "/.."
}
if (!file("$jdk_home/lib/tools.jar").isFile()) {
    throw new GradleException("Was not able to locate jdk home folder. Use 'jdk_home' project variable to specify JDK location explicitly. Current JAVA_HOME is: $java_home")
}
ext.jdk_home = jdk_home

// Default repository credentials
if (!project.hasProperty('nexusUsername')) {
    ext.nexusUsername = ''
    ext.nexusPassword = ''
}
logger.info 'Repository username: {}', project.nexusUsername

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots',
]
// Dependency versions
ext.mpsVersion = '2017.3.4'

// artifacts version. this is the default versioning that is used
def minor = '1'
def major = '0'
def commitHash = GitBasedVersioning.getGitShortCommitHash()
version = "$major.$minor.${GitBasedVersioning.getGitCommitCount()}.$commitHash"

ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository


configurations {
    mps
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
}

repositories {
        mavenLocal()
        for (repoUrl in project.dependencyRepositories) {
            maven {
                url repoUrl
            }
        }
}

task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

// Ant support
configurations {
    ant_lib
}

dependencies {
    ant_lib "org.apache.ant:ant-junit:1.10.1"
}


// tools might be needed later for running test scripts
ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({ true }) + project.files("$project.jdk_home/lib/tools.jar")

def artifactsDir = new File(rootDir, 'artifacts')


ext.mps_home =  '-Dmps.home=' + resolveMps.destinationDir.getAbsolutePath()
ext.build_dir = '-Dbuild.dir=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
ext.artifacts_dir = '-Dartifacts.root=' + artifactsDir
ext.pluginVersion = "-Dversion=" + version
ext.buildDate = "-DbuildDate=" + new Date().toString()
ext.extensions_home =  '-Dextensions.home=' + rootDir

// ___________________ utilities ___________________
File scriptFile(String relativePath) {
    new File("$rootDir/build/generated/$relativePath")
}

def defaultScriptArgs = [mps_home,  build_dir, artifacts_dir, ext.buildDate, ext.pluginVersion]



task build_allScripts(type: BuildLanguages, dependsOn: [resolveMps]){
     script scriptFile('allScripts/build.xml')
     scriptArgs = defaultScriptArgs
     scriptClasspath = buildScriptClasspath
}

task build_languages(type: BuildLanguages, dependsOn: [build_allScripts]){
     script scriptFile('languages/build.xml')
     scriptArgs = defaultScriptArgs
     scriptClasspath = buildScriptClasspath
}

task run_tests(type: TestLanguages, dependsOn: build_languages) {
    description "Will execute all tests from command line"
    script scriptFile('tests/build.xml')
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
}

// Ant <junit> task support
repositories {
    mavenCentral()
}
configurations {
    junitAnt
}
dependencies {
    junitAnt 'junit:junit:4.12'
    junitAnt('org.apache.ant:ant-junit:1.9.7') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.7') {
        transitive = false
    }
}

task packageAllScripts(type: Zip, dependsOn: run_tests) {
    baseName 'de.itemis.mps.extensions.allScripts'
    from artifactsDir
    include 'de.itemis.mps.extensions.allScripts/**'
}

task packageExtensions(type: Zip, dependsOn: run_tests) {
    baseName 'de.itemis.mps.extensions'
    from artifactsDir
    include 'de.itemis.mps.extensions/**'
}

publishing {
    repositories {
        maven {
            url project.publishingRepository
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    publications {
        allScripts(MavenPublication) {
            groupId 'de.itemis.mps.extensions'
            artifactId 'allScripts'
            artifact packageAllScripts
        }
        extensions(MavenPublication) {
            groupId 'de.itemis.mps'
            artifactId 'extensions'
            artifact packageExtensions
            //Pom.withProvidedDep pom, configurations.mps
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
    }
}

assemble.dependsOn build_languages