package test.de.itemis.mps.editor.celllayout.editor;

/*Generated by MPS */

import junit.framework.TestCase;
import de.itemis.mps.editor.celllayout.boxmodel.DefaultLayoutBox;
import de.itemis.mps.editor.celllayout.boxmodel.DefaultLayoutBoxFrame;
import de.itemis.mps.editor.celllayout.boxmodel.CalcOnWriteFrame;
import junit.framework.Assert;
import de.itemis.mps.editor.celllayout.boxmodel.LayoutBoxExtensions;
import de.itemis.mps.editor.celllayout.boxmodel.Bounds;

public class CalcOnWriteFrame_Test extends TestCase {
  private DefaultLayoutBox box1;
  private DefaultLayoutBoxFrame frame1a;
  private DefaultLayoutBoxFrame frame1b;
  private DefaultLayoutBox box2;
  private CalcOnWriteFrame frame2a;
  private CalcOnWriteFrame frame2b;
  public void test_left1() throws Exception {
    frame1a.setLeftSize(3);
    frame2a.setLeftSize(3);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
  }
  public void test_right1() throws Exception {
    frame1a.setRightSize(3);
    frame2a.setRightSize(3);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
  }
  public void test_top1() throws Exception {
    frame1a.setTopSize(3);
    frame2a.setTopSize(3);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
  }
  public void test_bottom1() throws Exception {
    frame1a.setBottomSize(3);
    frame2a.setBottomSize(3);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
  }
  public void test_left2() throws Exception {
    frame1b.setLeftSize(3);
    frame2b.setLeftSize(3);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
  }
  public void test_right2() throws Exception {
    frame1b.setRightSize(3);
    frame2b.setRightSize(3);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
  }
  public void test_top2() throws Exception {
    frame1b.setTopSize(3);
    frame2b.setTopSize(3);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
  }
  public void test_bottom2() throws Exception {
    frame1b.setBottomSize(3);
    frame2b.setBottomSize(3);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
  }
  public void test_boxBounds() throws Exception {
    frame1a.setFrameSize(3);
    frame2a.setFrameSize(3);
    frame1b.setFrameSize(4);
    frame2b.setFrameSize(4);
    Bounds bounds = new Bounds(55, 66, 77, 88);
    LayoutBoxExtensions.setBounds(box1, bounds);
    LayoutBoxExtensions.setBounds(box2, bounds);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
    Assert.assertEquals(frame1a.getAscent(), frame2a.getAscent());
    Assert.assertEquals(frame1a.getDescent(), frame2a.getDescent());
    Assert.assertEquals(frame1b.getAscent(), frame2b.getAscent());
    Assert.assertEquals(frame1b.getDescent(), frame2b.getDescent());
  }
  public void test_boxBounds2() throws Exception {
    frame1a.setFrameSize(3);
    frame2a.setFrameSize(3);
    frame1b.setFrameSize(4);
    frame2b.setFrameSize(4);
    Bounds bounds = new Bounds(55, 66, 77, 88);
    LayoutBoxExtensions.setBounds(box1, bounds);
    LayoutBoxExtensions.setBounds(box2, bounds);
    frame1a.setFrameSize(93);
    frame2a.setFrameSize(93);
    frame1b.setFrameSize(94);
    frame2b.setFrameSize(94);
    Assert.assertEquals(LayoutBoxExtensions.getBounds(box1), LayoutBoxExtensions.getBounds(box2));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1a), LayoutBoxExtensions.getBounds(frame2a));
    Assert.assertEquals(LayoutBoxExtensions.getBounds(frame1b), LayoutBoxExtensions.getBounds(frame2b));
    Assert.assertEquals(box1.getAscent(), box2.getAscent());
    Assert.assertEquals(box1.getDescent(), box2.getDescent());
    Assert.assertEquals(frame1a.getAscent(), frame2a.getAscent());
    Assert.assertEquals(frame1a.getDescent(), frame2a.getDescent());
    Assert.assertEquals(frame1b.getAscent(), frame2b.getAscent());
    Assert.assertEquals(frame1b.getDescent(), frame2b.getDescent());
  }
  public void setUp() {
    box1 = new DefaultLayoutBox();
    frame1a = new DefaultLayoutBoxFrame(box1);
    frame1b = new DefaultLayoutBoxFrame(frame1a);
    box2 = new DefaultLayoutBox();
    frame2a = new CalcOnWriteFrame(box2);
    frame2b = new CalcOnWriteFrame(frame2a);

    box1.setX(11);
    box1.setY(22);
    box1.setWidth(33);
    box1.setHeight(44);

    box2.setX(11);
    box2.setY(22);
    box2.setWidth(33);
    box2.setHeight(44);
  }
}
