package test.de.itemis.mps.editor.celllayout.editor;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.ThreadUtils;
import de.itemis.mps.editor.celllayout.runtime.LayoutInterceptor;
import java.util.List;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import junit.framework.Assert;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;

@MPSLaunch
public class Border_In_Grid_Test extends BaseTransformationTest {
  @Test
  public void test_Border_In_Grid() throws Throwable {
    initTest("${mbeddr.github.core.home}/code/plugins/sl-all", "r:ee6cf12e-fe83-4365-8111-77ef29f91ab7(test.de.itemis.mps.editor.celllayout.editor@tests)");
    runTest("test.de.itemis.mps.editor.celllayout.editor.Border_In_Grid_Test$TestBody", "testMethod", false);
  }

  @MPSLaunch
  public static class TestBody extends BaseEditorTestBody {
    @Override
    public void testMethodImpl() throws Exception {
      initEditorComponent("492440529734921832", "");

      final EditorComponent editorComponent = getEditorComponent();
      ThreadUtils.runInUIThreadAndWait(new Runnable() {
        public void run() {
          LayoutInterceptor.install(editorComponent);
          editorComponent.relayout();
        }
      });

      List<EditorCell> cellStack = ListSequence.fromList(new ArrayList<EditorCell>());
      EditorCell rootCell = editorComponent.getRootCell();
      ListSequence.fromList(cellStack).addElement(rootCell);
      // Collection >Vertical 
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(336, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(68, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(0));
      // Collection >Horizontal 
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(336, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(0));
      // aaaa 
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(192, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(1));
      // Collection >jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent@3617a36f 
      Assert.assertEquals(192, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(144, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(0));
      // bbb 
      Assert.assertEquals(196, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(24, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(1));
      // bbbbb 
      Assert.assertEquals(228, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(40, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(2));
      // bb 
      Assert.assertEquals(276, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(16, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(1));
      // Collection >Horizontal 
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(336, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(34, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(0));
      // Collection >Vertical 
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(192, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(34, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(0));
      // ccc 
      Assert.assertEquals(4, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(24, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(1));
      // ccccc 
      Assert.assertEquals(4, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(34, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(40, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(1));
      // Collection >Horizontal 
      Assert.assertEquals(192, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(144, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(0));
      // dd 
      Assert.assertEquals(196, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(20, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(1));
      // dddddddd 
      Assert.assertEquals(216, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(68, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(2));
      // Collection >Horizontal 
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(51, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(336, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(0));
      // ----------------------- 
      Assert.assertEquals(0, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(51, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(192, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).addElement(((EditorCell_Collection) ListSequence.fromList(cellStack).last()).getCellAt(1));
      // ----------------- 
      Assert.assertEquals(192, ListSequence.fromList(cellStack).last().getX() - rootCell.getX());
      Assert.assertEquals(51, ListSequence.fromList(cellStack).last().getY() - rootCell.getY());
      Assert.assertEquals(144, ListSequence.fromList(cellStack).last().getWidth());
      Assert.assertEquals(17, ListSequence.fromList(cellStack).last().getHeight());
      ListSequence.fromList(cellStack).removeLastElement();
      ListSequence.fromList(cellStack).removeLastElement();
    }
  }
}
